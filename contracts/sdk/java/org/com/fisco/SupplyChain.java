package org.com.fisco;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tuples.generated.Tuple6;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class SupplyChain extends Contract {
    public static String BINARY = "608060405234801561001057600080fd5b50613c2b806100206000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806368471260146100885780639cfa2c3a14610175578063a5efeb9814610379578063b166fe951461044e578063c5eb7b1f1461053c578063ed6940ae1461066e578063fe1891cb146107b0575b600080fd5b34801561009457600080fd5b506100ef600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061092a565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561013957808201518184015260208101905061011e565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561018157600080fd5b506101a460048036038101908080356000191690602001909291905050506110ef565b6040518087600019166000191681526020018060200180602001806020018060200186815260200185810385528a818151815260200191508051906020019080838360005b838110156102045780820151818401526020810190506101e9565b50505050905090810190601f1680156102315780820380516001836020036101000a031916815260200191505b50858103845289818151815260200191508051906020019080838360005b8381101561026a57808201518184015260208101905061024f565b50505050905090810190601f1680156102975780820380516001836020036101000a031916815260200191505b50858103835288818151815260200191508051906020019080838360005b838110156102d05780820151818401526020810190506102b5565b50505050905090810190601f1680156102fd5780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b8381101561033657808201518184015260208101905061031b565b50505050905090810190601f1680156103635780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34801561038557600080fd5b506103c8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560001916906020019092919050505061138b565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156104125780820151818401526020810190506103f7565b50505050905090810190601f16801561043f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561045a57600080fd5b5061048f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b0d565b604051808660001916600019168152602001806020018581526020018481526020018360028111156104bd57fe5b60ff168152602001828103825286818151815260200191508051906020019080838360005b838110156104fd5780820151818401526020810190506104e2565b50505050905090810190601f16801561052a5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561054857600080fd5b506105e8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803560ff169060200190929190505050611be8565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610632578082015181840152602081019050610617565b50505050905090810190601f16801561065f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561067a57600080fd5b5061071b60048036038101908080356000191690602001909291908035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612085565b6040518084151515158152602001806020018360001916600019168152602001828103825284818151815260200191508051906020019080838360005b83811015610773578082015181840152602081019050610758565b50505050905090810190601f1680156107a05780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156107bc57600080fd5b506108956004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506130bb565b6040518084151515158152602001806020018360001916600019168152602001828103825284818151815260200191508051906020019080838360005b838110156108ed5780820151818401526020810190506108d2565b50505050905090810190601f16801561091a5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b600060606000806000806000806001026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546000191614156109c75760006040805190810160405280601581526020017f436f6d70616e7920646f65736e27742065786973740000000000000000000000815250965096506110e5565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020945060009350600092505b846007018054905083101561105e57876040518082805190602001908083835b602083101515610a555780518252602082019150602081019050602083039250610a30565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019168560060160008760070186815481101515610a9d57fe5b9060005260206000200154600019166000191681526020019081526020016000206004016040518082805460018160011615610100020316600290048015610b1c5780601f10610afa576101008083540402835291820191610b1c565b820191906000526020600020905b815481529060010190602001808311610b08575b505091505060405180910390206000191614156110515760018560060160008760070186815481101515610b4c57fe5b9060005260206000200154600019166000191681526020019081526020016000206001016040518082805460018160011615610100020316600290048015610bcb5780601f10610ba9576101008083540402835291820191610bcb565b820191906000526020600020905b815481529060010190602001808311610bb7575b5050915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508460060160008660070185815481101515610c5857fe5b9060005260206000200154600019166000191681526020019081526020016000206005015485600301541215610d0357600a85600201600082825403925050819055506000606060405190810160405280602281526020017f636f6d70616e792070726f7065727479206e6f7420656e6f75676820746f207081526020017f6179000000000000000000000000000000000000000000000000000000000000815250965096506110e5565b8460060160008660070185815481101515610d1a57fe5b9060005260206000200154600019166000191681526020019081526020016000206005015485600301600082825403925050819055508460060160008660070185815481101515610d6757fe5b906000526020600020015460001916600019168152602001908152602001600020600501548160030160008282540192505081905550600a856002016000828254019250508190555083806001019450507f141e77f3ebfac92b5943f57830c7609c7dc6b4ccb4fc97f5c84b96c084d108c033838760060160008960070188815481101515610df257fe5b90600052602060002001546000191660001916815260200190815260200160002060050154604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a18460060160008660070185815481101515610ea957fe5b906000526020600020015460001916600019168152602001908152602001600020600080820160009055600182016000610ee391906138d3565b600282016000610ef391906138d3565b600382016000610f0391906138d3565b600482016000610f1391906138d3565b600582016000905550508060050160008660070185815481101515610f3457fe5b906000526020600020015460001916600019168152602001908152602001600020600080820160009055600182016000610f6e91906138d3565b600282016000610f7e91906138d3565b600382016000610f8e91906138d3565b600482016000610f9e91906138d3565b60058201600090555050600260008660070185815481101515610fbd57fe5b906000526020600020015460001916600019168152602001908152602001600020600080820160009055600182016000610ff791906138d3565b60028201600061100791906138d3565b60038201600061101791906138d3565b60048201600061102791906138d3565b60058201600090555050846007018381548110151561104257fe5b90600052602060002001600090555b8280600101935050610a10565b60008414156110a85760006040805190810160405280601d81526020017f5468657265206973206e6f206465627420696e20746869732064617465000000815250965096506110e5565b60016040805190810160405280601081526020017f7061792064656274207375636365737300000000000000000000000000000000815250965096505b5050505050915091565b6002602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111a15780601f10611176576101008083540402835291602001916111a1565b820191906000526020600020905b81548152906001019060200180831161118457829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561123f5780601f106112145761010080835404028352916020019161123f565b820191906000526020600020905b81548152906001019060200180831161122257829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112dd5780601f106112b2576101008083540402835291602001916112dd565b820191906000526020600020905b8154815290600101906020018083116112c057829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561137b5780601f106113505761010080835404028352916020019161137b565b820191906000526020600020905b81548152906001019060200180831161135e57829003601f168201915b5050505050908060050154905086565b600060606000806000806001026000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600019161480611432575060006001026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015460001916145b156114785760006040805190810160405280601581526020017f436f6d70616e7920646f65736e2774206578697374000000000000000000000081525094509450611b03565b60028081111561148457fe5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1660028111156114de57fe5b1415156115265760006040805190810160405280601681526020017f6d73672073656e646572206973206e6f742062616e6b0000000000000000000081525094509450611b03565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002092506000836002015412156115b45760006040805190810160405280601181526020017f637265646974206e6f7420656e6f75676800000000000000000000000000000081525094509450611b03565b60006001026000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008860001916600019168152602001908152602001600020600001546000191614156116b257600a6000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000828254039250508190555060006040805190810160405280601581526020017f5265636569707420646f65736e2774206578697374000000000000000000000081525094509450611b03565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501600087600019166000191681526020019081526020016000206005015483600301600082825401925050819055507f9cd20055accac9f0e7568133dcf4c92f132a90dd5edc8e80343cc00755be194e876000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000896000191660001916815260200190815260200160002060050154604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a160016000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000886000191660001916815260200190815260200160002060020160405180828054600181600116156101000203166002900480156118a35780601f106118815761010080835404028352918201916118a3565b820191906000526020600020905b81548152906001019060200180831161188f575b5050915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018160060160008860001916600019168152602001908152602001600020600101908054600181600116156101000203166002900461199992919061391b565b506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016002600088600019166000191681526020019081526020016000206001019080546001816001161561010002031660029004611a1892919061391b565b506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008760001916600019168152602001908152602001600020600080820160009055600182016000611a8c91906138d3565b600282016000611a9c91906138d3565b600382016000611aac91906138d3565b600482016000611abc91906138d3565b6005820160009055505060016040805190810160405280601181526020017f66696e616e63696e672073756363657373000000000000000000000000000000815250945094505b5050509250929050565b6000602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bbf5780601f10611b9457610100808354040283529160200191611bbf565b820191906000526020600020905b815481529060010190602001808311611ba257829003601f168201915b5050505050908060020154908060030154908060040160009054906101000a900460ff16905085565b60006060600080600091505b600380549050821015611c7f57600382815481101515611c1057fe5b9060005260206000209060080201600001546000191688600019161415611c725760006040805190810160405280601181526020017f436f6d70616e792049442065786973747300000000000000000000000000000081525093509350612079565b8180600101925050611bf4565b6000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508781600001816000191690555086816001019080519060200190611ce49291906139a2565b50601e8160020181905550858160030181905550848160040160006101000a81548160ff02191690836002811115611d1857fe5b0217905550806000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820154816000019060001916905560018201816001019080546001816001161561010002031660029004611d93929190613a22565b5060028201548160020155600382015481600301556004820160009054906101000a900460ff168160040160006101000a81548160ff02191690836002811115611dd957fe5b02179055506007820181600701908054611df4929190613aa9565b50905050886001886040518082805190602001908083835b602083101515611e315780518252602082019150602081019050602083039250611e0c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600381908060018154018082558091505090600182039060005260206000209060080201600090919290919091506000820154816000019060001916905560018201816001019080546001816001161561010002031660029004611f07929190613a22565b5060028201548160020155600382015481600301556004820160009054906101000a900460ff168160040160006101000a81548160ff02191690836002811115611f4d57fe5b02179055506007820181600701908054611f68929190613aa9565b505050507fad9b949bf7107da811391726253b95ecbd22b9e575c8e2886fa654dc2108f2048988604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612001578082015181840152602081019050611fe6565b50505050905090810190601f16801561202e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a160016040805190810160405280601381526020017f636f6d70616e7920616464207375636365737300000000000000000000000000815250935093505b50509550959350505050565b60006060600080600080600080600102600260008e6000191660001916815260200190815260200160002060000154600019161415612109576000806040805190810160405280601481526020017f7472616e736665724944206e6f74206578697374000000000000000000000000815250908060010290509650965096506130ac565b6000600102600260008d600019166000191681526020019081526020016000206000015460001916141515612183576000806040805190810160405280600c81526020017f4e65772049442065786973740000000000000000000000000000000000000000815250908060010290509650965096506130ac565b60006001026000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600019161480612222575060006001026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015460001916145b15612272576000806040805190810160405280601581526020017f436f6d70616e7920646f65736e27742065786973740000000000000000000000815250908060010290509650965096506130ac565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002093506000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002092506002808111156122fe57fe5b8460040160009054906101000a900460ff16600281111561231b57fe5b148061234d575060028081111561232e57fe5b8360040160009054906101000a900460ff16600281111561234b57fe5b145b1561239d576000806040805190810160405280601781526020017f63616e27742074726164696e6720776974682062616e6b000000000000000000815250908060010290509650965096506130ac565b888460050160008e6000191660001916815260200190815260200160002060050154121561243757600080606060405190810160405280602281526020017f74686973207265636569707473206d6f6e657920646f6e6573277420656e6f7581526020017f6768000000000000000000000000000000000000000000000000000000000000815250908060010290509650965096506130ac565b60018460050160008e6000191660001916815260200190815260200160002060020160405180828054600181600116156101000203166002900480156124b45780601f106124925761010080835404028352918201916124b4565b820191906000526020600020905b8154815290600101906020018083116124a0575b5050915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050888460050160008e6000191660001916815260200190815260200160002060050160008282540392505081905550888160060160008e600019166000191681526020019081526020016000206005016000828254039250508190555088600260008e600019166000191681526020019081526020016000206005016000828254039250508190555060c0604051908101604052808c600019168152602001846001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126605780601f1061263557610100808354040283529160200191612660565b820191906000526020600020905b81548152906001019060200180831161264357829003601f168201915b50505050508152602001826001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127025780601f106126d757610100808354040283529160200191612702565b820191906000526020600020905b8154815290600101906020018083116126e557829003601f168201915b505050505081526020018981526020018560050160008f600019166000191681526020019081526020016000206004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127c65780601f1061279b576101008083540402835291602001916127c6565b820191906000526020600020905b8154815290600101906020018083116127a957829003601f168201915b505050505081526020018a8152508360050160008d6000191660001916815260200190815260200160002060008201518160000190600019169055602082015181600101908051906020019061281d929190613afb565b50604082015181600201908051906020019061283a929190613afb565b506060820151816003019080519060200190612857929190613afb565b506080820151816004019080519060200190612874929190613afb565b5060a0820151816005015590505060c0604051908101604052808c600019168152602001846001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129305780601f1061290557610100808354040283529160200191612930565b820191906000526020600020905b81548152906001019060200180831161291357829003601f168201915b50505050508152602001826001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129d25780601f106129a7576101008083540402835291602001916129d2565b820191906000526020600020905b8154815290600101906020018083116129b557829003601f168201915b505050505081526020018981526020018560050160008f600019166000191681526020019081526020016000206004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a965780601f10612a6b57610100808354040283529160200191612a96565b820191906000526020600020905b815481529060010190602001808311612a7957829003601f168201915b505050505081526020018a8152508160060160008d60001916600019168152602001908152602001600020600082015181600001906000191690556020820151816001019080519060200190612aed929190613afb565b506040820151816002019080519060200190612b0a929190613afb565b506060820151816003019080519060200190612b27929190613afb565b506080820151816004019080519060200190612b44929190613afb565b5060a08201518160050155905050806007018b908060018154018082558091505090600182039060005260206000200160009091929091909150906000191690555060c0604051908101604052808c600019168152602001846001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c345780601f10612c0957610100808354040283529160200191612c34565b820191906000526020600020905b815481529060010190602001808311612c1757829003601f168201915b50505050508152602001826001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612cd65780601f10612cab57610100808354040283529160200191612cd6565b820191906000526020600020905b815481529060010190602001808311612cb957829003601f168201915b505050505081526020018981526020018560050160008f600019166000191681526020019081526020016000206004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612d9a5780601f10612d6f57610100808354040283529160200191612d9a565b820191906000526020600020905b815481529060010190602001808311612d7d57829003601f168201915b505050505081526020018a815250600260008d60001916600019168152602001908152602001600020600082015181600001906000191690556020820151816001019080519060200190612def929190613afb565b506040820151816002019080519060200190612e0c929190613afb565b506060820151816003019080519060200190612e29929190613afb565b506080820151816004019080519060200190612e46929190613afb565b5060a0820151816005015590505060008460050160008e60001916600019168152602001908152602001600020600501541415612fcc578360050160008d60001916600019168152602001908152602001600020600080820160009055600182016000612eb391906138d3565b600282016000612ec391906138d3565b600382016000612ed391906138d3565b600482016000612ee391906138d3565b600582016000905550508060060160008d60001916600019168152602001908152602001600020600080820160009055600182016000612f2391906138d3565b600282016000612f3391906138d3565b600382016000612f4391906138d3565b600482016000612f5391906138d3565b60058201600090555050600260008d60001916600019168152602001908152602001600020600080820160009055600182016000612f9191906138d3565b600282016000612fa191906138d3565b600382016000612fb191906138d3565b600482016000612fc191906138d3565b600582016000905550505b7fd2b516630cd10c7ff21c25ecb7a22e497f73679c66a121633f37c542924306c0338b8b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a160018b6040805190810160405280601081526020017f7472616e73666572207375636365737300000000000000000000000000000000815250909650965096505b50505050955095509592505050565b6000606060008060006130cc613b7b565b6000600102600260008d600019166000191681526020019081526020016000206000015460001916141515613146576000806040805190810160405280601081526020017f5265636569707420494420657869737400000000000000000000000000000000815250908060010290509550955095506138c5565b60006001026000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546000191614806131e5575060006001026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015460001916145b15613235576000806040805190810160405280601581526020017f436f6d70616e7920646f65736e27742065786973740000000000000000000000815250908060010290509550955095506138c5565b6000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002092506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091506002808111156132c157fe5b8360040160009054906101000a900460ff1660028111156132de57fe5b148061331057506002808111156132f157fe5b8260040160009054906101000a900460ff16600281111561330e57fe5b145b15613360576000806040805190810160405280601781526020017f63616e27742074726164696e6720776974682062616e6b000000000000000000815250908060010290509550955095506138c5565b60c0604051908101604052808c600019168152602001846001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561340e5780601f106133e35761010080835404028352916020019161340e565b820191906000526020600020905b8154815290600101906020018083116133f157829003601f168201915b50505050508152602001836001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156134b05780601f10613485576101008083540402835291602001916134b0565b820191906000526020600020905b81548152906001019060200180831161349357829003601f168201915b505050505081526020018a8152602001898152602001888152509050808360050160008d60001916600019168152602001908152602001600020600082015181600001906000191690556020820151816001019080519060200190613516929190613afb565b506040820151816002019080519060200190613533929190613afb565b506060820151816003019080519060200190613550929190613afb565b50608082015181600401908051906020019061356d929190613afb565b5060a08201518160050155905050808260060160008d600019166000191681526020019081526020016000206000820151816000019060001916905560208201518160010190805190602001906135c5929190613afb565b5060408201518160020190805190602001906135e2929190613afb565b5060608201518160030190805190602001906135ff929190613afb565b50608082015181600401908051906020019061361c929190613afb565b5060a0820151816005015590505080600260008d60001916600019168152602001908152602001600020600082015181600001906000191690556020820151816001019080519060200190613672929190613afb565b50604082015181600201908051906020019061368f929190613afb565b5060608201518160030190805190602001906136ac929190613afb565b5060808201518160040190805190602001906136c9929190613afb565b5060a08201518160050155905050816007018b90806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055507fae6a400a947c1cf6d7402fc973dbac01c4cf2b4e03070b4f237557e3f2876acf8a33898c8c604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156137df5780820151818401526020810190506137c4565b50505050905090810190601f16801561380c5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561384557808201518184015260208101905061382a565b50505050905090810190601f1680156138725780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a160018b6040805190810160405280601481526020017f7369676e20526563656970742073756363657373000000000000000000000000815250909550955095505b505050955095509592505050565b50805460018160011615610100020316600290046000825580601f106138f95750613918565b601f0160209004906000526020600020908101906139179190613bb5565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106139545780548555613991565b8280016001018555821561399157600052602060002091601f016020900482015b82811115613990578254825591600101919060010190613975565b5b50905061399e9190613bb5565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106139e357805160ff1916838001178555613a11565b82800160010185558215613a11579182015b82811115613a105782518255916020019190600101906139f5565b5b509050613a1e9190613bb5565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613a5b5780548555613a98565b82800160010185558215613a9857600052602060002091601f016020900482015b82811115613a97578254825591600101919060010190613a7c565b5b509050613aa59190613bb5565b5090565b828054828255906000526020600020908101928215613aea5760005260206000209182015b82811115613ae9578254825591600101919060010190613ace565b5b509050613af79190613bda565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613b3c57805160ff1916838001178555613b6a565b82800160010185558215613b6a579182015b82811115613b69578251825591602001919060010190613b4e565b5b509050613b779190613bb5565b5090565b60c0604051908101604052806000801916815260200160608152602001606081526020016060815260200160608152602001600081525090565b613bd791905b80821115613bd3576000816000905550600101613bbb565b5090565b90565b613bfc91905b80821115613bf8576000816000905550600101613be0565b5090565b905600a165627a7a723058207a75a404671cf980a540cff059d5c172230115cb848eb4ee1c5aa86fbabe820e0029";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"expiredDate\",\"type\":\"string\"}],\"name\":\"payMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ReceiptMap\",\"outputs\":[{\"name\":\"ID\",\"type\":\"bytes32\"},{\"name\":\"seller\",\"type\":\"string\"},{\"name\":\"customer\",\"type\":\"string\"},{\"name\":\"signTime\",\"type\":\"string\"},{\"name\":\"expiredTime\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"company\",\"type\":\"address\"},{\"name\":\"Receiptid\",\"type\":\"bytes32\"}],\"name\":\"getFinancing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"companyMap\",\"outputs\":[{\"name\":\"ID\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"credit\",\"type\":\"int256\"},{\"name\":\"property\",\"type\":\"int256\"},{\"name\":\"companyType\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_property\",\"type\":\"int256\"},{\"name\":\"_companyType\",\"type\":\"uint8\"}],\"name\":\"CompanyAddInChain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transferID\",\"type\":\"bytes32\"},{\"name\":\"newid\",\"type\":\"bytes32\"},{\"name\":\"transferTo\",\"type\":\"address\"},{\"name\":\"money\",\"type\":\"int256\"},{\"name\":\"transferTime\",\"type\":\"string\"}],\"name\":\"receiptTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"sellDate\",\"type\":\"string\"},{\"name\":\"expireDate\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"purchaseSign\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"companyName\",\"type\":\"string\"}],\"name\":\"CompanyInChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"signDate\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"expireDate\",\"type\":\"string\"}],\"name\":\"SignReceipt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tfrom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tto\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"transferReceipt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"company\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"Financing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"company\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"PayDebt\",\"type\":\"event\"}]";

    public static final String FUNC_PAYMONEY = "payMoney";

    public static final String FUNC_RECEIPTMAP = "ReceiptMap";

    public static final String FUNC_GETFINANCING = "getFinancing";

    public static final String FUNC_COMPANYMAP = "companyMap";

    public static final String FUNC_COMPANYADDINCHAIN = "CompanyAddInChain";

    public static final String FUNC_RECEIPTTRANSFER = "receiptTransfer";

    public static final String FUNC_PURCHASESIGN = "purchaseSign";

    public static final Event COMPANYINCHAIN_EVENT = new Event("CompanyInChain", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event SIGNRECEIPT_EVENT = new Event("SignReceipt", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSFERRECEIPT_EVENT = new Event("transferReceipt", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event FINANCING_EVENT = new Event("Financing", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event PAYDEBT_EVENT = new Event("PayDebt", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Int256>() {}));
    ;

    @Deprecated
    protected SupplyChain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SupplyChain(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SupplyChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SupplyChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> payMoney(String expiredDate) {
        final Function function = new Function(
                FUNC_PAYMONEY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(expiredDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void payMoney(String expiredDate, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_PAYMONEY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(expiredDate)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String payMoneySeq(String expiredDate) {
        final Function function = new Function(
                FUNC_PAYMONEY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(expiredDate)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple6<byte[], String, String, String, String, BigInteger>> ReceiptMap(byte[] param0) {
        final Function function = new Function(FUNC_RECEIPTMAP, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple6<byte[], String, String, String, String, BigInteger>>(
                new Callable<Tuple6<byte[], String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple6<byte[], String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<byte[], String, String, String, String, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> getFinancing(String company, byte[] Receiptid) {
        final Function function = new Function(
                FUNC_GETFINANCING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(company), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(Receiptid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getFinancing(String company, byte[] Receiptid, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETFINANCING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(company), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(Receiptid)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getFinancingSeq(String company, byte[] Receiptid) {
        final Function function = new Function(
                FUNC_GETFINANCING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(company), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(Receiptid)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple5<byte[], String, BigInteger, BigInteger, BigInteger>> companyMap(String param0) {
        final Function function = new Function(FUNC_COMPANYMAP, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple5<byte[], String, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple5<byte[], String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<byte[], String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<byte[], String, BigInteger, BigInteger, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> CompanyAddInChain(String _addr, byte[] _id, String _name, BigInteger _property, BigInteger _companyType) {
        final Function function = new Function(
                FUNC_COMPANYADDINCHAIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_property), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_companyType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void CompanyAddInChain(String _addr, byte[] _id, String _name, BigInteger _property, BigInteger _companyType, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_COMPANYADDINCHAIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_property), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_companyType)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String CompanyAddInChainSeq(String _addr, byte[] _id, String _name, BigInteger _property, BigInteger _companyType) {
        final Function function = new Function(
                FUNC_COMPANYADDINCHAIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_property), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_companyType)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> receiptTransfer(byte[] transferID, byte[] newid, String transferTo, BigInteger money, String transferTime) {
        final Function function = new Function(
                FUNC_RECEIPTTRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(transferID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(newid), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(transferTo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(money), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transferTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void receiptTransfer(byte[] transferID, byte[] newid, String transferTo, BigInteger money, String transferTime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_RECEIPTTRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(transferID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(newid), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(transferTo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(money), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transferTime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String receiptTransferSeq(byte[] transferID, byte[] newid, String transferTo, BigInteger money, String transferTime) {
        final Function function = new Function(
                FUNC_RECEIPTTRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(transferID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(newid), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(transferTo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(money), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transferTime)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> purchaseSign(byte[] id, String seller, String sellDate, String expireDate, BigInteger money) {
        final Function function = new Function(
                FUNC_PURCHASESIGN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(sellDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(expireDate), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void purchaseSign(byte[] id, String seller, String sellDate, String expireDate, BigInteger money, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_PURCHASESIGN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(sellDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(expireDate), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String purchaseSignSeq(byte[] id, String seller, String sellDate, String expireDate, BigInteger money) {
        final Function function = new Function(
                FUNC_PURCHASESIGN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(sellDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(expireDate), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public List<CompanyInChainEventResponse> getCompanyInChainEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(COMPANYINCHAIN_EVENT, transactionReceipt);
        ArrayList<CompanyInChainEventResponse> responses = new ArrayList<CompanyInChainEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CompanyInChainEventResponse typedResponse = new CompanyInChainEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.companyName = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerCompanyInChainEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(COMPANYINCHAIN_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerCompanyInChainEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(COMPANYINCHAIN_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<SignReceiptEventResponse> getSignReceiptEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNRECEIPT_EVENT, transactionReceipt);
        ArrayList<SignReceiptEventResponse> responses = new ArrayList<SignReceiptEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignReceiptEventResponse typedResponse = new SignReceiptEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.customer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.signDate = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.expireDate = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSignReceiptEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SIGNRECEIPT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerSignReceiptEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SIGNRECEIPT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<TransferReceiptEventResponse> getTransferReceiptEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERRECEIPT_EVENT, transactionReceipt);
        ArrayList<TransferReceiptEventResponse> responses = new ArrayList<TransferReceiptEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferReceiptEventResponse typedResponse = new TransferReceiptEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tfrom = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tto = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registertransferReceiptEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSFERRECEIPT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registertransferReceiptEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSFERRECEIPT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<FinancingEventResponse> getFinancingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FINANCING_EVENT, transactionReceipt);
        ArrayList<FinancingEventResponse> responses = new ArrayList<FinancingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FinancingEventResponse typedResponse = new FinancingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.company = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerFinancingEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(FINANCING_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerFinancingEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(FINANCING_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<PayDebtEventResponse> getPayDebtEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAYDEBT_EVENT, transactionReceipt);
        ArrayList<PayDebtEventResponse> responses = new ArrayList<PayDebtEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PayDebtEventResponse typedResponse = new PayDebtEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.company = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerPayDebtEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(PAYDEBT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerPayDebtEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(PAYDEBT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static SupplyChain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SupplyChain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SupplyChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SupplyChain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SupplyChain load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SupplyChain(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SupplyChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SupplyChain(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SupplyChain> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SupplyChain.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SupplyChain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SupplyChain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SupplyChain> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SupplyChain.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SupplyChain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SupplyChain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class CompanyInChainEventResponse {
        public Log log;

        public String addr;

        public String companyName;
    }

    public static class SignReceiptEventResponse {
        public Log log;

        public String seller;

        public String customer;

        public BigInteger money;

        public String signDate;

        public String expireDate;
    }

    public static class TransferReceiptEventResponse {
        public Log log;

        public String tfrom;

        public String tto;

        public BigInteger money;
    }

    public static class FinancingEventResponse {
        public Log log;

        public String company;

        public BigInteger amount;
    }

    public static class PayDebtEventResponse {
        public Log log;

        public String company;

        public String to;

        public BigInteger amount;
    }
}
